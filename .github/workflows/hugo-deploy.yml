# 此文件用于配置GitHub Actions自动部署Hugo网站到GitHub Pages
name: Deploy Hugo site to Pages

on:
  # 在推送到main分支时运行
  push:
    branches: ["main"]
  # 允许手动运行此工作流
  workflow_dispatch:

# 设置GITHUB_TOKEN的权限，允许部署到GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在运行和最新队列之间的运行
# 但不会取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: "pages"
  cancel-in-progress: false

# 默认为使用bash的shell
defaults:
  run:
    shell: bash

jobs:
  # 构建工作
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.145.0
    steps:
      - name: 检查是否存在package.json # 检查是否需要Node.js
        id: check-package-json
        run: |
          if [ -f package.json ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 设置Node.js # 如果你的主题需要Node.js（大多数现代主题都需要）
        if: steps.check-package-json.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # 不使用cache选项，避免在没有lock文件时出错
          
      - name: 安装Node.js依赖 # 安装Node.js依赖（如果package.json存在）
        if: steps.check-package-json.outputs.exists == 'true'
        run: npm ci
          
      - name: 安装Node.js依赖 # 安装Node.js依赖（如果package.json存在）
        run: |
          if [ -f package.json ]; then
            npm ci
          fi

      - name: 设置Pages # 配置GitHub Pages环境
        id: pages
        uses: actions/configure-pages@v4
        
      - name: 安装Hugo CLI # 安装Hugo命令行工具
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.145.0'
          extended: true

      - name: 设置Hugo缓存 # 设置Hugo缓存以提高构建速度
        uses: actions/cache@v3
        with:
          path: /tmp/hugo_cache
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-

      - name: 构建Hugo网站 # 构建Hugo网站
        env:
          # 对于使用Google Analytics等服务的选项
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo --gc --minify --baseURL "${{ steps.pages.outputs.base_url }}/"

      - name: 上传构建结果 # 上传构建结果
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # 部署工作
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 部署到GitHub Pages # 部署到GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

# 部署完成后，您的网站将在 https://用户名.github.io/ 或您配置的自定义域名上可用

